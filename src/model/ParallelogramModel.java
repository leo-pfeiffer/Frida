package model;/** Represents a parallelogram. * @author 190026921 */public class ParallelogramModel extends ShapeModel2D {    /** Custom constructor. */    public ParallelogramModel() { }    /** Calculate the x and y coordinates of the corners of the parallelogram. */    private void calcPosition() {        // Skew of the parallelogram. Horizontal sides are shifted by (1 - skew) * width.        final float skew = 0.67f;        //  Get the maxima and minima of the coordinates        int xmin = Math.min(startX, endX);        int xmax = Math.max(startX, endX);        int ymin = Math.min(startY, endY);        int ymax = Math.max(startY, endY);        // Calculate the width        int width = xmax - xmin;        // Set the y coordinates.        this.ypoints = new int[]{ymin, ymin, ymax, ymax};        // Temporary array for the x coordinates of the shape.        int[] xpoints;        // Calculate the corner points for the two different scenarios.        // If drawn from top left to bottom right or vice versa        if ((startX <= endX & startY <= endY) | (startX >= endX & startY >= endY)) {            xpoints = new int[]{xmin, xmin + (int) (skew * width), xmax, xmin + (int) ((1 - skew) * width)};        }        // If drawn from top right to bottom left or vice versa        else {            xpoints = new int[]{xmin + (int) ((1 - skew) * width), xmax, xmin + (int) (skew * width), xmin};        }        // Set the x coordinates.        this.xpoints = xpoints;        // Set the corners        setCorners();    }    /**  {@inheritDoc} */    @Override    public int[][] getCorners() {        // calculate the x and y coordinates of the corners.        calcPosition();        return super.getCorners();    }    /**  {@inheritDoc} */    @Override    public int[] getXpoints() {        // calculate the x and y coordinates of the corners.        calcPosition();        return super.getXpoints();    }    /**  {@inheritDoc} */    @Override    public int[] getYpoints() {        // calculate the x and y coordinates of the corners.        calcPosition();        return super.getYpoints();    }}